library(devtools)
use_gpl3_license()
use_gpl3_license("Yi Zuo")
document()
document()
?get.var
check()
check()
document()
check()
document()
check()
importFrom("stats", "lm")
document()
document()
document()
document()
document()
document()
check()
document()
check()
?get.var
use_r("data")
document()
?t.housing
use_r("pro.sgpv")
load_all()
get.var
head(t.housing)
any(c(0,1))
!any(c(0,1))
stage="2"
if(stage%in% 1:2) stop("Stage only takes value of 1 or 2.")
stage=2
if(stage%in% 1:2) stop("Stage only takes value of 1 or 2.")
stage%in% 1:2
if(!(stage%in% 1:2)) stop("Stage only takes value of 1 or 2.")
stage="2"
if(!(stage%in% 1:2)) stop("Stage only takes value of 1 or 2.")
stage="3"
if(!(stage%in% 1:2)) stop("Stage only takes value of 1 or 2.")
x=c(1,NA,2)
if(!any(complete.cases(x))==F | !any(complete.cases(y))==F){
warning("Only complete records will be used.")
}
y=3
if(!any(complete.cases(x))==F | !any(complete.cases(y))==F){
warning("Only complete records will be used.")
}
x=matrix(1:9,3,3)
y=c(1,2)
if(nrow(x)!= length(y)) stop("Input x and y have different number of observations")
x
x[1,2]<-NA
x
comp.index <- complete.cases(data.frame(x,y))
y=1:3
comp.index <- complete.cases(data.frame(x,y))
comp.index
x <- x[comp.index,]
y <- y[comp.index]
x
y
x[1,1] <- "3"
x
x=matrix(1:9,3,3)
x=data.frame(x)
x
x$X1[1] <- "3"
x
x$X1[1] <- "hi"
x
is.numeric(x)
xx <- matrix(1:9,3,3)
is.numeric(x)
is.numeric(xx)
is.numeric(data.frame(xx))
as.matrix(x)
is.numeric(as.matrix(x))
is.numeric(as.matrix(xx))
xx
is.numeric(as.matrix(data.frame(xx)))
is.numeric(as.matrix(t.housing))
y=c("1",2)
is.numeric(y)
x
is.numeric(x$X1)
is.numeric(x$X2)
is.numeric(x$X3)
if(!is.numeric(as.matrix(x)) | !is.numeric(y)) stop("The input data have non-numeric values.")
y=1:3
if(!is.numeric(as.matrix(x)) | !is.numeric(y)) stop("The input data have non-numeric values.")
x
x=t.housing[,-ncol(t.housing)]
x
head(x)
y=t.housing$V9
stage=1
if(!(stage%in% 1:2)) stop("Stage only takes value of 1 or 2.")
if(nrow(x)!= length(y)) stop("Input x and y have different number of observations")
if(!is.numeric(as.matrix(x)) | !is.numeric(y)) stop("The input data have non-numeric values.")
if(!any(complete.cases(x))==F | !any(complete.cases(y))==F){
warning("Only complete records will be used.")
comp.index <- complete.cases(data.frame(x,y))
x <- x[comp.index,]
y <- y[comp.index]
}
any(complete.cases(x))
complete.cases(x)
any(complete.cases(x))
any(complete.cases(x)==F)
sum(complete.cases(x)) == nrow(x)
x=t.housing[,-ncol(t.housing)]
y=t.housing$V9
sum(complete.cases(x)) == nrow(x)
sum(complete.cases(y)) == length(y)
any(complete.cases(x)==F)
if(!any(complete.cases(x)==F) | !any(complete.cases(y)==F)){
warning("Only complete records will be used.")
comp.index <- complete.cases(data.frame(x,y))
x <- x[comp.index,]
y <- y[comp.index]
}
nrow(x)
if(any(complete.cases(x)==F) | any(complete.cases(y)==F)){
warning("Only complete records will be used.")
comp.index <- complete.cases(data.frame(x,y))
x <- x[comp.index,]
y <- y[comp.index]
}
y[3]<-NA
if(any(complete.cases(x)==F) | any(complete.cases(y)==F)){
warning("Only complete records will be used.")
comp.index <- complete.cases(data.frame(x,y))
x <- x[comp.index,]
y <- y[comp.index]
}
nrow(x)
x=t.housing[,-ncol(t.housing)]
y=t.housing$V9
if(!(stage%in% 1:2)) stop("Stage only takes value of 1 or 2.")
if(nrow(x)!= length(y)) stop("Input x and y have different number of observations")
if(!is.numeric(as.matrix(x)) | !is.numeric(y)) stop("The input data have non-numeric values.")
if(any(complete.cases(x)==F) | any(complete.cases(y)==F)){
warning("Only complete records will be used.")
comp.index <- complete.cases(data.frame(x,y))
x <- x[comp.index,]
y <- y[comp.index]
}
document()
?pro.sgpv
stage
stage="2"
if(stage == 2){
lasso.cv <- cv.glmnet(xs,ys)
candidate.index <- which(coef(lasso.cv,s=lasso.cv$lambda.1se)[-1] != 0)
}else candidate.index <- 1:ncol(xs)
library(glmnet)
if(stage == 2){
lasso.cv <- cv.glmnet(xs,ys)
candidate.index <- which(coef(lasso.cv,s=lasso.cv$lambda.1se)[-1] != 0)
}else candidate.index <- 1:ncol(xs)
xs <- scale(x)
ys <- scale(y)
if(stage == 2){
lasso.cv <- cv.glmnet(xs,ys)
candidate.index <- which(coef(lasso.cv,s=lasso.cv$lambda.1se)[-1] != 0)
}else candidate.index <- 1:ncol(xs)
candidate.index
stage
out.sgpv <- get.var(candidate.index, xs, ys)
out.sgpv
pro.sgpv <- function(x,y,stage=c(1,2)){
q
}
pro.sgpv <- function(x,y,stage=c(1,2)){
pro.sgpv <- function(x,y,stage=c(1,2)){
if(!(stage%in% 1:2)) stop("Stage only takes value of 1 or 2.")
if(nrow(x)!= length(y)) stop("Input x and y have different number of observations")
if(!is.numeric(as.matrix(x)) | !is.numeric(y)) stop("The input data have non-numeric values.")
if(any(complete.cases(x)==F) | any(complete.cases(y)==F)){
warning("Only complete records will be used.")
comp.index <- complete.cases(data.frame(x,y))
x <- x[comp.index,]
y <- y[comp.index]
}
xs <- scale(x)
ys <- scale(y)
if(stage == 2){
lasso.cv <- cv.glmnet(xs,ys)
candidate.index <- which(coef(lasso.cv,s=lasso.cv$lambda.1se)[-1] != 0)
}else candidate.index <- 1:ncol(xs)
out.sgpv <- get.var(candidate.index, xs, ys)
return(out.sgpv)
}
}
pro.sgpv <- function(x,y,stage=c(1,2)){
}
pro.sgpv <- function(x,y,stage=c(1,2)){
}
get.var <- function(candidate.index,xs,ys){
if(length(candidate.index)==0){
out.sgpv <- integer(0)
}else{
# run fully relaxed LASSO
f.l <- lm(ys~xs[,candidate.index])
# get confidence bands
pe <- summary(f.l)$coef[-1,1]
se <- summary(f.l)$coef[-1,2]
null.bound.p <- mean(se)
# screen variables
out.sgpv <- candidate.index[which(abs(pe)> 1.96*se+null.bound.p )]
}
return( out.sgpv)
}
hi <- function(x,y,stage=c(1,2)){
}
pro.sgpv <- function(x,y,stage=c(1,2)){
}
if(stage == 2){
lasso.cv <- cv.glmnet(xs,ys)
candidate.index <- which(coef(lasso.cv,s=lasso.cv$lambda.1se)[-1] != 0)
}else candidate.index <- 1:ncol(xs)
out.sgpv <- get.var(candidate.index, xs, ys)
out.sgpv
pro.sgpv <- function(x,y,stage=c(1,2)){
}
pro.sgpv <- function(x,y,stage=c(1,2)){
if(stage == 2){
lasso.cv <- cv.glmnet(xs,ys)
candidate.index <- which(coef(lasso.cv,s=lasso.cv$lambda.1se)[-1] != 0)
} else candidate.index <- 1:ncol(xs)
}
if(stage == 2){
lasso.cv <- cv.glmnet(xs,ys)
candidate.index <- which(coef(lasso.cv,s=lasso.cv$lambda.1se)[-1] != 0)
}else{
candidate.index <- 1:ncol(xs)
}
pro.sgpv <- function(x, y, stage=c(1,2) ){
}
document()
rm(list = c("get.var", "pro.sgpv"))
document()
pro.sgpv <- function(x, y, stage=c(1,2) ){
}
pro.sgpv <- function(x, y, stage=c(1,2) ){
}
pro.sgpv <- function(x, y, stage=c(1,2) ){}
pro.sgpv <- function(x, y, stage=c(1,2) ){
}
pro.sgpv <- function(x, y, stage=c(1,2) ){
hi
}
pro.sgpv <- function(x, y, stage=c(1,2) ){
}
pro.sgpv <- function(x, y, stage=c(1,2)){
}
pro.sgpv <-function(x, y, stage=c(1,2)){
}
rm(list=pro.sgpv)
rm(pro.sgpv)
pro.sgpv <- function(x, y, stage=c(1,2)){
q}
pro.sgpv <- function(x, y, stage=c(1,2)){
}
rm(pro.sgpv)
pro.sgpv <- function(x, y, stage=c(1,2) ){
}
pro.sgpv <- function(x, y, stage=c(1,2)){
}
pro.sgpv <- function(x, y, stage=c(1,2) ){
pro.sgpv <- function(x, y, stage=c(1,2) ){
}
}
pro.sgpv <- function(x, y, stage=c(1,2) ){
pro.sgpv <- function(x, y, stage=c(1,2)){
}
}
pro.sgpv <- function(x, y, stage=c(1,2)){}
pro.sgpv <- function(x, y, stage=c(1,2)){
pro.sgpv <- function(x, y, stage=c(1,2)){
}
}
rm(pro.sgpv())
rm(pro.sgpv
)
pro.sgpv <- function(x, y, stage=c(1,2)){
}
rm(pro.sgpv)
check()
document()
check()
document()
?t.housing
document()
?t.housing
?pro.sgpv
document()
?t.housing
document()
check()
install()
