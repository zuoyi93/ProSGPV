out.1 <- unlist(regmatches(out.1, gregexpr('\\(?[0-9,.]+', out.1)))
out.1 <- as.numeric(gsub('\\(', '', gsub(',', '', out.1)))
out.1
sort(table(paste(temp[1, ])), decreasing = T)
hist(temp[2,])
temp
temp[2,]
hist(unlist(temp[2,]))
hist.plot <- hist(unlist(temp[2,]),
main="Distribution of model size",
xlab="Model size",
color="pink")
hist.plot <- hist(unlist(temp[2,]),
main="Distribution of model size",
xlab="Model size",
col="pink")
hist.plot <- hist(unlist(temp[2,]),
main="Distribution of model size",
xlab="Model size",
col="pink")
hist.plot
hist.plot <- hist(unlist(temp[2,]),
main="Distribution of model size",
xlab="Model size",
col="pink",breaks=10)
hist.plot <- hist(unlist(temp[2,]),
main="Distribution of model size",
xlab="Model size",
col="pink",breaks=5)
plot(density(unlist(temp[2,])),
main="Distribution of model size",
xlab="Model size",
col="pink"
)
polygon(density(unlist(temp[2,])), col="red", border="blue")
load_all()
which.sgpv(100,object)
document()
document()
document()
document()
check()
document()
check()
install()
styler::style_dir()
object
load_all()
coef(object)
message("None of variables are selected.")
message("Therefore, the summary is shown for the model with intercept only")
a <- function(){
message("None of variables are selected.")
message("Therefore, the summary is shown for the model with intercept only")
}
a()
a <- function(){
message("None of variables are selected.")
message("Therefore, the summary is shown for the model with intercept only\n")
}
a()
summary(coxph(Surv(object$y[, 1], object$y[, 2]) ~ 1))
object
data.linear <- gen.sim.data(n = 20, p = 10, s = 4,family="cox")
x <- data.linear[[1]]
y <- data.linear[[2]]
index <- data.linear[[3]]
true.beta <- data.linear[[4]]
object = pro.sgpv(x,y,family="cox")
dim(x)
length(y)
y
family="cox"
# standardize inputs in linear regression
if (family == "gaussian") {
xs <- scale(x)
ys <- scale(y)
} else {
xs <- as.matrix(x)
ys <- y
}
# get candidate set
if (stage == 2) {
if (family != "cox") {
lasso.cv <- cv.glmnet(xs, ys, family = family)
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda)[-1] != 0)
} else {
lasso.cv <- cv.glmnet(xs, Surv(ys[, 1], ys[, 2]), family = "cox")
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda) != 0)
}
} else {
candidate.index <- 1:ncol(xs)
lambda <- NULL
}
out.sgpv <- get.var(candidate.index, xs, ys, family)
candidate.index
out.sgpv
object = pro.sgpv(x,y,family="cox")
debug(object = pro.sgpv(x,y,family="cox"))
out.sgpv <- get.var(candidate.index, xs, ys, family)
data.linear <- gen.sim.data(n = 40, p = 10, s = 4,family="cox")
x <- data.linear[[1]]
y <- data.linear[[2]]
index <- data.linear[[3]]
true.beta <- data.linear[[4]]
object = pro.sgpv(x,y,family="cox")
load_all()
object = pro.sgpv(x,y,family="cox")
# standardize inputs in linear regression
if (family == "gaussian") {
xs <- scale(x)
ys <- scale(y)
} else {
xs <- as.matrix(x)
ys <- y
}
# get candidate set
if (stage == 2) {
if (family != "cox") {
lasso.cv <- cv.glmnet(xs, ys, family = family)
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda)[-1] != 0)
} else {
lasso.cv <- cv.glmnet(xs, Surv(ys[, 1], ys[, 2]), family = "cox")
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda) != 0)
}
} else {
candidate.index <- 1:ncol(xs)
lambda <- NULL
}
candidate.index
xs
ys
# get candidate set
if (stage == 2) {
if (family != "cox") {
lasso.cv <- cv.glmnet(xs, ys, family = family)
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda)[-1] != 0)
} else {
lasso.cv <- cv.glmnet(xs, Surv(ys[, 1], ys[, 2]), family = "cox")
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda) != 0)
}
} else {
candidate.index <- 1:ncol(xs)
lambda <- NULL
}
out.sgpv <- get.var(candidate.index, xs, ys, family)
out.sgpv
data.linear <- gen.sim.data(n = 40, p = 10, s = 4,family="cox")
x <- data.linear[[1]]
y <- data.linear[[2]]
index <- data.linear[[3]]
true.beta <- data.linear[[4]]
object = pro.sgpv(x,y,family="cox")
if (!is.numeric(as.matrix(x)) | !is.numeric(y)) stop("The input data have non-numeric values.")
if (any(complete.cases(x) == F) | any(complete.cases(y) == F)) {
warning("Only complete records will be used.")
comp.index <- complete.cases(data.frame(x, y))
if (family != "cox") {
x <- x[comp.index, ]
y <- y[comp.index]
} else {
x <- x[comp.index, ]
y <- y[comp.index, ]
}
}
if (missing(stage)) stage <- 2
stage
if (!stage %in% c(1, 2)) stop("`stage` only takes 1 or 2.")
# standardize inputs in linear regression
if (family == "gaussian") {
xs <- scale(x)
ys <- scale(y)
} else {
xs <- as.matrix(x)
ys <- y
}
# get candidate set
if (stage == 2) {
if (family != "cox") {
lasso.cv <- cv.glmnet(xs, ys, family = family)
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda)[-1] != 0)
} else {
lasso.cv <- cv.glmnet(xs, Surv(ys[, 1], ys[, 2]), family = "cox")
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda) != 0)
}
} else {
candidate.index <- 1:ncol(xs)
lambda <- NULL
}
out.sgpv <- get.var(candidate.index, xs, ys, family)
lasso.cv <- cv.glmnet(xs, Surv(ys[, 1], ys[, 2]), family = "cox")
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda) != 0)
candidate.index
data.linear <- gen.sim.data(n = 40, p = 10, s = 4,family="cox")
x <- data.linear[[1]]
y <- data.linear[[2]]
index <- data.linear[[3]]
true.beta <- data.linear[[4]]
object = pro.sgpv(x,y,family="cox")
# standardize inputs in linear regression
if (family == "gaussian") {
xs <- scale(x)
ys <- scale(y)
} else {
xs <- as.matrix(x)
ys <- y
}
ys
lasso.cv <- cv.glmnet(xs, Surv(ys[, 1], ys[, 2]), family = "cox")
lambda <- lasso.cv$lambda.1se
coef(lasso.cv, s = lambda)
candidate.index <- which(coef(lasso.cv, s = lambda) != 0)
candidate.index
out.sgpv <- get.var(candidate.index, xs, ys, family)
out.sgpv
load_all()
object = pro.sgpv(x,y,family="cox")
data.linear <- gen.sim.data(n = 40, p = 10, s = 4,family="poisson")
x <- data.linear[[1]]
y <- data.linear[[2]]
index <- data.linear[[3]]
true.beta <- data.linear[[4]]
object = pro.sgpv(x,y,family="poisson")
object
data.linear <- gen.sim.data(n = 40, p = 10, s = 4,family="cox")
x <- data.linear[[1]]
y <- data.linear[[2]]
index <- data.linear[[3]]
true.beta <- data.linear[[4]]
object = pro.sgpv(x,y,family="cox")
# standardize inputs in linear regression
if (family == "gaussian") {
xs <- scale(x)
ys <- scale(y)
} else {
xs <- as.matrix(x)
ys <- y
}
# get candidate set
if (stage == 2) {
if (family != "cox") {
lasso.cv <- cv.glmnet(xs, ys, family = family)
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda)[-1] != 0)
} else {
lasso.cv <- cv.glmnet(xs, Surv(ys[, 1], ys[, 2]), family = "cox")
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda) != 0)
}
} else {
candidate.index <- 1:ncol(xs)
lambda <- NULL
}
data.linear <- gen.sim.data(n = 40, p = 10, s = 4,family="cox")
x <- data.linear[[1]]
y <- data.linear[[2]]
index <- data.linear[[3]]
true.beta <- data.linear[[4]]
object = pro.sgpv(x,y,family="cox")
# standardize inputs in linear regression
if (family == "gaussian") {
xs <- scale(x)
ys <- scale(y)
} else {
xs <- as.matrix(x)
ys <- y
}
family="cox"
# standardize inputs in linear regression
if (family == "gaussian") {
xs <- scale(x)
ys <- scale(y)
} else {
xs <- as.matrix(x)
ys <- y
}
# get candidate set
if (stage == 2) {
if (family != "cox") {
lasso.cv <- cv.glmnet(xs, ys, family = family)
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda)[-1] != 0)
} else {
lasso.cv <- cv.glmnet(xs, Surv(ys[, 1], ys[, 2]), family = "cox")
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda) != 0)
}
} else {
candidate.index <- 1:ncol(xs)
lambda <- NULL
}
stage=2
# get candidate set
if (stage == 2) {
if (family != "cox") {
lasso.cv <- cv.glmnet(xs, ys, family = family)
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda)[-1] != 0)
} else {
lasso.cv <- cv.glmnet(xs, Surv(ys[, 1], ys[, 2]), family = "cox")
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda) != 0)
}
} else {
candidate.index <- 1:ncol(xs)
lambda <- NULL
}
out.sgpv <- get.var(candidate.index, xs, ys, family)
out.sgpv
candidate.index
head(x)
head(y)
object = pro.sgpv(x,y,family="cox")
library(devtools)
library(roxygen2)
load_all()
data.linear <- gen.sim.data(n = 40, p = 10, s = 4,family="cox")
x <- data.linear[[1]]
y <- data.linear[[2]]
index <- data.linear[[3]]
true.beta <- data.linear[[4]]
object = pro.sgpv(x,y,family="cox")
object = pro.sgpv(x,y,stage=1,family="cox")
object
object = pro.sgpv(x,y,stage=2,family="cox")
# standardize inputs in linear regression
if (family == "gaussian") {
xs <- scale(x)
ys <- scale(y)
} else {
xs <- as.matrix(x)
ys <- y
}
family="cox"
# standardize inputs in linear regression
if (family == "gaussian") {
xs <- scale(x)
ys <- scale(y)
} else {
xs <- as.matrix(x)
ys <- y
}
# get candidate set
if (stage == 2) {
if (family != "cox") {
lasso.cv <- cv.glmnet(xs, ys, family = family)
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda)[-1] != 0)
} else {
lasso.cv <- cv.glmnet(xs, Surv(ys[, 1], ys[, 2]), family = "cox")
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda) != 0)
}
} else {
candidate.index <- 1:ncol(xs)
lambda <- NULL
}
stage=2
# get candidate set
if (stage == 2) {
if (family != "cox") {
lasso.cv <- cv.glmnet(xs, ys, family = family)
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda)[-1] != 0)
} else {
lasso.cv <- cv.glmnet(xs, Surv(ys[, 1], ys[, 2]), family = "cox")
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda) != 0)
}
} else {
candidate.index <- 1:ncol(xs)
lambda <- NULL
}
candidate.index
coef(lasso.cv, s = lambda)
data.linear <- gen.sim.data(n = 40, p = 10, s = 4,family="binomial")
x <- data.linear[[1]]
y <- data.linear[[2]]
index <- data.linear[[3]]
true.beta <- data.linear[[4]]
object = pro.sgpv(x,y,stage=2,family="binomial")
object
object = pro.sgpv(x,y,stage=1,family="binomial")
object
data.linear <- gen.sim.data(n = 60, p = 12, s = 4,family="cox")
x <- data.linear[[1]]
y <- data.linear[[2]]
index <- data.linear[[3]]
true.beta <- data.linear[[4]]
object = pro.sgpv(x,y,family="cox")
if (any(complete.cases(x) == F) | any(complete.cases(y) == F)) {
warning("Only complete records will be used.\n")
comp.index <- complete.cases(data.frame(x, y))
if (family != "cox") {
x <- x[comp.index, ]
y <- y[comp.index]
} else {
x <- x[comp.index, ]
y <- y[comp.index, ]
}
}
if (missing(stage)) stage <- 2
if (!stage %in% c(1, 2)) stop("`stage` only takes 1 or 2.")
if (missing(family)) family <- "gaussian"
# when p > n, only two-stage is available
if (stage == 1 & nrow(x) < ncol(x)) stage <- 2
if (is.null(colnames(x))) colnames(x) <- paste("V", 1:ncol(x), sep = "")
# standardize inputs in linear regression
if (family == "gaussian") {
xs <- scale(x)
ys <- scale(y)
} else {
xs <- as.matrix(x)
ys <- y
}
# get candidate set
if (stage == 2) {
if (family != "cox") {
lasso.cv <- cv.glmnet(xs, ys, family = family)
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda)[-1] != 0)
} else {
lasso.cv <- cv.glmnet(xs, Surv(ys[, 1], ys[, 2]), family = "cox")
lambda <- lasso.cv$lambda.1se
candidate.index <- which(coef(lasso.cv, s = lambda) != 0)
}
} else {
candidate.index <- 1:ncol(xs)
lambda <- NULL
}
candidate.index
out.sgpv <- get.var(candidate.index, xs, ys, family)
out <- list(
var.index = out.sgpv,
var.label = colnames(x)[out.sgpv],
lambda = lambda,
x = data.frame(x),
y = y,
family = family,
stage = stage
)
class(out) <- "sgpv"
out
object = pro.sgpv(x,y,stage=1,family="cox")
coef(object)
object
cox.m <- coxph(Surv(object$y[, 1], object$y[, 2]) ~
object$x[, object$var.index])
object$var.index
object$y[, 1]
Surv(object$y[, 1], object$y[, 2])
coxph(Surv(object$y[, 1], object$y[, 2]) ~
object$x[, object$var.index])
cox.m <- coxph(Surv(object$y[, 1], object$y[, 2]) ~
as.matrix(object$x[, object$var.index]) )
load_all()
coef(object)
load_all()
object = pro.sgpv(x,y,stage=2,family="cox")
traceback(object = pro.sgpv(x,y,stage=2,family="cox"))
data.linear <- gen.sim.data(n = 60, p = 12, s = 6,family="cox")
x <- data.linear[[1]]
y <- data.linear[[2]]
index <- data.linear[[3]]
true.beta <- data.linear[[4]]
object = pro.sgpv(x,y,stage=2,family="cox")
coef(object)
summary(object)
summary(coxph(Surv(object$y[, 1], object$y[, 2]) ~ 1))
load_all()
summary(object)
data.d <- data.frame(y1 = object$y[,1], y2 = object$y[,2],
xx = object$x[, object$var.index])
load_all()
summary(object)
data.d <- data.frame(y1 = object$y[,1], y2 = object$y[,2],
xx = object$x[, object$var.index])
colnames(data.d)
data.d[,1]
colnames(data.d)[1] <- "Time"
colnames(data.d)[2] <- "Event"
colnames(data.d)[c(-1,-2)] <- object$var.label
colnames(data.d)
summary(coxph(Surv("Time","Event") ~ .,data=data.d))
data.d[,2]
is.numeric(data.d[,1])
summary(coxph(Surv(data.d[,1],data.d[,2]) ~ .,data=data.d))
load_all()
summary(object)
data.d <- data.frame(object$x[, object$var.index])
colnames(data.d)<- object$var.label
summary(coxph(Surv(object$y[,1],object$y[,2]) ~ .,data=data.d))
load_all()
summary(object)
object = pro.sgpv(x,y,stage=2,family="cox")
data.linear <- gen.sim.data(n = 60, p = 12, s = 6,family="poisson")
x <- data.linear[[1]]
y <- data.linear[[2]]
index <- data.linear[[3]]
true.beta <- data.linear[[4]]
object = pro.sgpv(x,y,stage=2,family="poisson")
summary(object)
document()
