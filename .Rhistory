hi <- function(x,y,stage=c(1,2)){
}
pro.sgpv <- function(x,y,stage=c(1,2)){
}
if(stage == 2){
lasso.cv <- cv.glmnet(xs,ys)
candidate.index <- which(coef(lasso.cv,s=lasso.cv$lambda.1se)[-1] != 0)
}else candidate.index <- 1:ncol(xs)
out.sgpv <- get.var(candidate.index, xs, ys)
out.sgpv
pro.sgpv <- function(x,y,stage=c(1,2)){
}
pro.sgpv <- function(x,y,stage=c(1,2)){
if(stage == 2){
lasso.cv <- cv.glmnet(xs,ys)
candidate.index <- which(coef(lasso.cv,s=lasso.cv$lambda.1se)[-1] != 0)
} else candidate.index <- 1:ncol(xs)
}
if(stage == 2){
lasso.cv <- cv.glmnet(xs,ys)
candidate.index <- which(coef(lasso.cv,s=lasso.cv$lambda.1se)[-1] != 0)
}else{
candidate.index <- 1:ncol(xs)
}
pro.sgpv <- function(x, y, stage=c(1,2) ){
}
document()
rm(list = c("get.var", "pro.sgpv"))
document()
pro.sgpv <- function(x, y, stage=c(1,2) ){
}
pro.sgpv <- function(x, y, stage=c(1,2) ){
}
pro.sgpv <- function(x, y, stage=c(1,2) ){}
pro.sgpv <- function(x, y, stage=c(1,2) ){
}
pro.sgpv <- function(x, y, stage=c(1,2) ){
hi
}
pro.sgpv <- function(x, y, stage=c(1,2) ){
}
pro.sgpv <- function(x, y, stage=c(1,2)){
}
pro.sgpv <-function(x, y, stage=c(1,2)){
}
rm(list=pro.sgpv)
rm(pro.sgpv)
pro.sgpv <- function(x, y, stage=c(1,2)){
q}
pro.sgpv <- function(x, y, stage=c(1,2)){
}
rm(pro.sgpv)
pro.sgpv <- function(x, y, stage=c(1,2) ){
}
pro.sgpv <- function(x, y, stage=c(1,2)){
}
pro.sgpv <- function(x, y, stage=c(1,2) ){
pro.sgpv <- function(x, y, stage=c(1,2) ){
}
}
pro.sgpv <- function(x, y, stage=c(1,2) ){
pro.sgpv <- function(x, y, stage=c(1,2)){
}
}
pro.sgpv <- function(x, y, stage=c(1,2)){}
pro.sgpv <- function(x, y, stage=c(1,2)){
pro.sgpv <- function(x, y, stage=c(1,2)){
}
}
rm(pro.sgpv())
rm(pro.sgpv
)
pro.sgpv <- function(x, y, stage=c(1,2)){
}
rm(pro.sgpv)
check()
document()
check()
document()
?t.housing
document()
?t.housing
?pro.sgpv
document()
?t.housing
document()
check()
install()
setwd("~/Dropbox/Zuo Project/Relaxed Lasso/Paper 1 SGPV null bound/Manuscript/R markdown/Real world/")
library(glmnet)
library(Hmisc)
library(ncvreg) # scad mcp
library(plus) # mc+
library(corrr) # cool correlation plot
library(openxlsx)
library(forestplot)
dim(raw.d) # 372 by 27
# load the data
rw.d <- read.xlsx("Real data.xlsx",sheet="Data")
# determine the variables of interest
raw.d <- data.frame(rw.d[,c(6:12,13:31,108)])
colnames(raw.d) <- gsub('[.]',"",colnames(raw.d))
head(raw.d)
# create design matrix
X <- as.matrix(raw.d[,-ncol(raw.d)])
xs <- scale(X)
# create vector for outcome
Y <- as.vector(raw.d[,ncol(raw.d)])
ys <- scale(Y)
# get the index of selected variables
get.out <- function(candidate.index,xs,ys){
if(length(candidate.index)==0){
out.sgpv <- integer(0)
}else{
# run fully relaxed LASSO
f.l <- lm(ys~xs[,candidate.index])
# get confidence bands
pe <- summary(f.l)$coef[-1,1]
se <- summary(f.l)$coef[-1,2]
null.bound.p <- mean(se)
# method 1: sgpv
out.sgpv <- candidate.index[which(abs(pe)> 1.96*se+null.bound.p )]
}
return( out.sgpv)
}
# main function
one.time.main <- function(){
n = nrow(raw.d)
# split data into training and test
train.index <- sample(1:n,n*0.7)
test.index <- setdiff(1:n,train.index)
# SCAD
cv.scad <- cv.ncvreg(X[train.index,], Y[train.index],penalty="SCAD")
rmse.scad <- sqrt(mean((predict(cv.scad,X[test.index,],s=cv.scad$lambda.min) -
Y[test.index])^2))
# mc+
mcplus <- plus(X[train.index,],Y[train.index],method = "mc+")
sigma <- sqrt(summary(lm(Y[train.index]~X[train.index,]))$sigma^2)
lambda.mcplus <- sqrt(2/n*log(ncol(X)))*sigma
out.mcplus <- coef(mcplus,lam=lambda.mcplus)
rmse.mcplus <- sqrt(mean((X[test.index,]%*%out.mcplus - Y[test.index])^2 ))
# 1-stage
out.sgpv.1 <- get.out(1:ncol(X),xs[train.index,],ys[train.index])
rmse.sgpv.1 <- sqrt(mean((fitted(lm(Y[test.index]~X[test.index,out.sgpv.1]))-Y[test.index])^2))
# 2-stage
lasso.cv.s <- cv.glmnet(xs[train.index,],ys[train.index])
lambda.s.1se <- lasso.cv.s$lambda.1se
candidate.index <- which(coef(lasso.cv.s,s=lambda.s.1se)[-1]!=0)
out.sgpv.2 <- get.out(candidate.index,xs[train.index,],ys[train.index])
rmse.sgpv.2 <- sqrt(mean((fitted(lm(Y[test.index]~X[test.index,out.sgpv.2]))-Y[test.index])^2))
# adaptive lasso prediction
ols.coef <- coef(lm(Y[train.index]~X[train.index,]))[-1]
adalasso <- cv.glmnet(X[train.index,],Y[train.index],keep=T,penalty.factor = 1/sqrt(abs(ols.coef)))
fitted.al <- predict(adalasso,newx=X[test.index,], s=adalasso$lambda.min)
rmse.al <- sqrt(mean(( fitted.al -Y[test.index] )^2))
# scad, mcp, sgpv.1, sgpv.2, adaptive lasso
return(c( rmse.scad, rmse.mcplus,
rmse.sgpv.1, rmse.sgpv.2,
rmse.al
))
}
many.sim.main <- function(num.sim=20){
out <- NULL
out <- replicate(num.sim,one.time.main())
# median
out.median <- apply(out,1,median)
# 2.5th percentile
out.2.5 <- apply(out,1,quantile,0.025)
# 2.5th percentile
out.97.5 <- apply(out,1,quantile,0.975)
return(c(out.median,out.2.5,out.97.5)  )
}
# get prediction data
data.p <- many.sim.main(1000)
data.p
getHdata(nhgh)
head(nhgh)
nhgh.d <- nhgh[,c(-1,-4,-5)]
# change sex to binary coding
nhgh.d$sex <- as.character(nhgh.d$sex)
nhgh.d$sex[nhgh.d$sex=="male"] <- "0"
nhgh.d$sex[nhgh.d$sex=="female"] <- "1"
nhgh.d$sex <- as.integer(nhgh.d$sex)
# remove missing data
nhgh.d <- nhgh.d[complete.cases(nhgh.d),]
# create design matrix
X <- as.matrix(nhgh.d[,-14])
xs <- scale(X)
# create vector for log transformed outcome
Y <- as.vector(log(nhgh.d$gh))
ys <- as.vector(scale(Y))
# create vector for the outcome on the original scale
Y.original <- as.vector(nhgh.d$gh)
yss <- as.vector(scale(Y.original))
# get the index of selected variables
get.out <- function(candidate.index,xs,ys){
if(length(candidate.index)==0){
out.sgpv <- integer(0)
}else{
# run fully relaxed LASSO
f.l <- lm(ys~xs[,candidate.index])
# get confidence bands
pe <- summary(f.l)$coef[-1,1]
se <- summary(f.l)$coef[-1,2]
null.bound.p <- mean(se)
# method 1: sgpv
out.sgpv <- candidate.index[which(abs(pe)> 1.96*se+null.bound.p )]
}
return( out.sgpv)
}
# main function
one.time.main.original <- function(){
n = nrow(nhgh.d)
# split data into training and test
train.index <- sample(1:n,n*0.7)
test.index <- setdiff(1:n,train.index)
# SCAD
cv.scad <- cv.ncvreg(X[train.index,], Y[train.index],penalty="SCAD")
pred.scad <- exp(predict(cv.scad,X[test.index,],s=cv.scad$lambda.min))
rmse.scad <- sqrt(mean((pred.scad -Y.original[test.index])^2))
# mc+
mcplus <- plus(X[train.index,],Y[train.index],method = "mc+")
sigma <- summary(lm(Y[train.index]~X[train.index,]))$sigma
lambda.mcplus <- sqrt(2/n*log(ncol(X)))*sigma
out.mcplus <- coef(mcplus,lam=lambda.mcplus)
pred.mcp <- exp(X[test.index,]%*%out.mcplus)
rmse.mcplus <- sqrt(mean((pred.mcp - Y.original[test.index])^2 ))
# 1-stage
out.sgpv.1 <- get.out(1:ncol(X),xs[train.index,],ys[train.index])
pred.1s <- exp(fitted(lm(Y[test.index]~X[test.index,out.sgpv.1])))
rmse.sgpv.1 <- sqrt(mean((pred.1s-Y.original[test.index])^2))
# 2-stage
lasso.cv.s <- cv.glmnet(xs[train.index,],ys[train.index])
lambda.s.1se <- lasso.cv.s$lambda.1se
candidate.index <- which(coef(lasso.cv.s,s=lambda.s.1se)[-1]!=0)
out.sgpv.2 <- get.out(candidate.index,xs[train.index,],ys[train.index])
pred.2s <- exp(fitted(lm(Y[test.index]~X[test.index,out.sgpv.2])))
rmse.sgpv.2 <- sqrt(mean((pred.2s-Y.original[test.index])^2))
# adaptive lasso prediction
ols.coef <- coef(lm(Y[train.index]~X[train.index,]))[-1]
adalasso <- cv.glmnet(X[train.index,],Y[train.index],keep=T,penalty.factor = 1/sqrt(abs(ols.coef)))
fitted.al <- exp(predict(adalasso,newx=X[test.index,], s=adalasso$lambda.min))
rmse.al <- sqrt(mean(( fitted.al -Y.original[test.index] )^2))
# scad, mcp, sgpv.1, sgpv.2, adaptive lasso
return(c( rmse.scad, rmse.mcplus,
rmse.sgpv.1, rmse.sgpv.2,
rmse.al
))
}
many.sim.main.original <- function(num.sim=20){
out <- NULL
out <- replicate(num.sim,one.time.main.original())
# median
out.median <- apply(out,1,median)
# 2.5th percentile
out.2.5 <- apply(out,1,quantile,0.025)
# 2.5th percentile
out.97.5 <- apply(out,1,quantile,0.975)
return(c(out.median,out.2.5,out.97.5)  )
}
# get prediction data from original response
data.p.original <- many.sim.main.original(1000)
# get response from the scaled response
# main function
one.time.main.s <- function(){
n = nrow(nhgh.d)
# split data into training and test
train.index <- sample(1:n,n*0.7)
test.index <- setdiff(1:n,train.index)
# SCAD
cv.scad <- cv.ncvreg(xs[train.index,], yss[train.index],penalty="SCAD")
pred.scad <- predict(cv.scad,xs[test.index,],s=cv.scad$lambda.min)
rmse.scad <- sqrt(mean((pred.scad -yss[test.index])^2))
# mc+
mcplus <- plus(xs[train.index,],yss[train.index],method = "mc+")
sigma <- summary(lm(yss[train.index]~xs[train.index,]))$sigma
lambda.mcplus <- sqrt(2/n*log(ncol(xs)))*sigma
out.mcplus <- coef(mcplus,lam=lambda.mcplus)
pred.mcp <- xs[test.index,]%*%out.mcplus
rmse.mcplus <- sqrt(mean((pred.mcp - yss[test.index])^2 ))
# 1-stage
out.sgpv.1 <- get.out(1:ncol(xs),xs[train.index,],yss[train.index])
pred.1s <- fitted(lm(yss[test.index]~xs[test.index,out.sgpv.1]))
rmse.sgpv.1 <- sqrt(mean((pred.1s-yss[test.index])^2))
# 2-stage
lasso.cv.s <- cv.glmnet(xs[train.index,],yss[train.index])
lambda.s.1se <- lasso.cv.s$lambda.1se
candidate.index <- which(coef(lasso.cv.s,s=lambda.s.1se)[-1]!=0)
out.sgpv.2 <- get.out(candidate.index,xs[train.index,],yss[train.index])
pred.2s <- fitted(lm(yss[test.index]~xs[test.index,out.sgpv.2]))
rmse.sgpv.2 <- sqrt(mean((pred.2s-yss[test.index])^2))
# adaptive lasso prediction
ols.coef <- coef(lm(yss[train.index]~xs[train.index,]))[-1]
adalasso <- cv.glmnet(xs[train.index,],yss[train.index],keep=T,penalty.factor = 1/sqrt(abs(ols.coef)))
fitted.al <- exp(predict(adalasso,newx=xs[test.index,], s=adalasso$lambda.min))
rmse.al <- sqrt(mean(( fitted.al -yss[test.index] )^2))
# scad, mcp, sgpv.1, sgpv.2, adaptive lasso
return(c( rmse.scad, rmse.mcplus,
rmse.sgpv.1, rmse.sgpv.2,
rmse.al
))
}
many.sim.main.s <- function(num.sim=20){
out <- NULL
out <- replicate(num.sim,one.time.main.s())
# median
out.median <- apply(out,1,median)
# 2.5th percentile
out.2.5 <- apply(out,1,quantile,0.025)
# 2.5th percentile
out.97.5 <- apply(out,1,quantile,0.975)
return(c(out.median,out.2.5,out.97.5)  )
}
data.p.s <- many.sim.main.s(1000)
save(data.p,
data.p.original,
data.p.s,
file="forestdata.RData")
png("iran.pred.png",width=7,height=7,units="in",res=300)
forestplot(labeltext=c("SCAD","MC+","1-stage","2-stage","AL"),
mean = data.p[1:5],
lower = data.p[6:10],
upper = data.p[11:15],
boxsize = 0.1,
col=fpColors(lines="blue"),
xticks=seq(0,500,100),
txt_gp = fpTxtGp(xlab = gpar(cex=1),
ticks = gpar(cex=1)
),
xlab="Prediction RMSE")
dev.off()
forestplot(labeltext=c("SCAD","MC+","1-stage","2-stage","AL"),
mean = c(data.p.original[1:5],data.p.s[1:5]),
lower = c(data.p.original[6:10],data.p.s[6:10]),
upper = c(data.p.original[11:15],data.p.s[11:15]),
boxsize = 0.1,
col=fpColors(lines="blue"),
xticks=seq(0,5,1),
txt_gp = fpTxtGp(xlab = gpar(cex=1),
ticks = gpar(cex=1)
),
xlab="Prediction RMSE")
forestplot(labeltext=c("SCAD","MC+","1-stage","2-stage","AL"),
mean = cbind(data.p.original[1:5],data.p.s[1:5]),
lower = cbind(data.p.original[6:10],data.p.s[6:10]),
upper = cbind(data.p.original[11:15],data.p.s[11:15]),
boxsize = 0.1,
col=fpColors(lines="blue"),
xticks=seq(0,5,1),
txt_gp = fpTxtGp(xlab = gpar(cex=1),
ticks = gpar(cex=1)
),
xlab="Prediction RMSE")
forestplot(labeltext=c("SCAD","MC+","1-stage","2-stage","AL"),
mean = cbind(data.p.original[1:5],data.p.s[1:5]),
lower = cbind(data.p.original[6:10],data.p.s[6:10]),
upper = cbind(data.p.original[11:15],data.p.s[11:15]),
boxsize = 0.1,
col=fpColors(lines="blue",box=c("red","black")),
xticks=seq(0,5,1),
txt_gp = fpTxtGp(xlab = gpar(cex=1),
ticks = gpar(cex=1)
),
xlab="Prediction RMSE")
forestplot(labeltext=c("SCAD","MC+","1-stage","2-stage","AL"),
mean = cbind(data.p.original[1:5],data.p.s[1:5]),
lower = cbind(data.p.original[6:10],data.p.s[6:10]),
upper = cbind(data.p.original[11:15],data.p.s[11:15]),
boxsize = 0.1,
col=fpColors(lines="blue",box=c("red","black")),
xticks=seq(0,5,1),
txt_gp = fpTxtGp(xlab = gpar(cex=1),
ticks = gpar(cex=1)
),legend=c("Original scale","Standardized scale"),
xlab="Prediction RMSE")
png("nhanes.pred.png",width=7,height=7,units="in",res=300)
forestplot(labeltext=c("SCAD","MC+","1-stage","2-stage","AL"),
mean = cbind(data.p.original[1:5],data.p.s[1:5]),
lower = cbind(data.p.original[6:10],data.p.s[6:10]),
upper = cbind(data.p.original[11:15],data.p.s[11:15]),
boxsize = 0.1,
col=fpColors(lines="blue",box=c("red","black")),
xticks=seq(0,5,1),
txt_gp = fpTxtGp(xlab = gpar(cex=1),
ticks = gpar(cex=1)
),legend=c("Original scale","Standardized scale"),
xlab="Prediction RMSE")
dev.off()
forestplot(labeltext=c("SCAD","MC+","1-stage","2-stage","AL"),
mean = cbind(data.p.original[1:5],data.p.s[1:5]),
lower = cbind(data.p.original[6:10],data.p.s[6:10]),
upper = cbind(data.p.original[11:15],data.p.s[11:15]),
boxsize = 0.1,
col=fpColors(lines="blue",box=c("red","black")),
xticks=seq(0,5,1),
txt_gp = fpTxtGp(xlab = gpar(cex=1),
ticks = gpar(cex=1)
),legend=c("Original scale","Standardized scale"),
legend_args = fpLegend(cex=1),
xlab="Prediction RMSE")
forestplot(labeltext=c("SCAD","MC+","1-stage","2-stage","AL"),
mean = cbind(data.p.original[1:5],data.p.s[1:5]),
lower = cbind(data.p.original[6:10],data.p.s[6:10]),
upper = cbind(data.p.original[11:15],data.p.s[11:15]),
boxsize = 0.1,
col=fpColors(lines="blue",box=c("red","black")),
xticks=seq(0,5,1),
txt_gp = fpTxtGp(xlab = gpar(cex=1),
ticks = gpar(cex=1)
),legend=c("Original scale","Standardized scale"),
legend_args = fpLegend(gp=gpar(cex=1)),
xlab="Prediction RMSE")
forestplot(labeltext=c("SCAD","MC+","1-stage","2-stage","AL"),
mean = cbind(data.p.original[1:5],data.p.s[1:5]),
lower = cbind(data.p.original[6:10],data.p.s[6:10]),
upper = cbind(data.p.original[11:15],data.p.s[11:15]),
boxsize = 0.1,
col=fpColors(lines="blue",box=c("red","black")),
xticks=seq(0,5,1),
txt_gp = fpTxtGp(xlab = gpar(cex=1),
ticks = gpar(cex=1)
),legend=c("Original scale","Standardized scale"),
legend_args = fpLegend(gp=gpar(cex=1.2)),
xlab="Prediction RMSE")
forestplot(labeltext=c("SCAD","MC+","1-stage","2-stage","AL"),
mean = cbind(data.p.original[1:5],data.p.s[1:5]),
lower = cbind(data.p.original[6:10],data.p.s[6:10]),
upper = cbind(data.p.original[11:15],data.p.s[11:15]),
boxsize = 0.1,
col=fpColors(lines="blue",box=c("red","black")),
xticks=seq(0,5,1),
txt_gp = fpTxtGp(xlab = gpar(cex=1),
ticks = gpar(cex=1)
),legend=c("Original scale","Standardized scale"),
legend_args = fpLegend(gp=gpar(cex=2)),
xlab="Prediction RMSE")
forestplot(labeltext=c("SCAD","MC+","1-stage","2-stage","AL"),
mean = cbind(data.p.original[1:5],data.p.s[1:5]),
lower = cbind(data.p.original[6:10],data.p.s[6:10]),
upper = cbind(data.p.original[11:15],data.p.s[11:15]),
boxsize = 0.1,
col=fpColors(lines="blue",box=c("red","black")),
xticks=seq(0,5,1),
txt_gp = fpTxtGp(xlab = gpar(cex=1),
ticks = gpar(cex=1)
),legend=c("Original scale","Standardized scale"),
legend_args = fpLegend(gp=gpar(cex=12)),
xlab="Prediction RMSE")
png("nhanes.pred.png",width=6,height=6,units="in",res=300)
forestplot(labeltext=c("SCAD","MC+","1-stage","2-stage","AL"),
mean = cbind(data.p.original[1:5],data.p.s[1:5]),
lower = cbind(data.p.original[6:10],data.p.s[6:10]),
upper = cbind(data.p.original[11:15],data.p.s[11:15]),
boxsize = 0.1,
col=fpColors(lines="blue",box=c("red","black")),
xticks=seq(0,5,1),
txt_gp = fpTxtGp(xlab = gpar(cex=1),
ticks = gpar(cex=1)
),legend=c("Original scale","Standardized scale"),
legend_args = fpLegend(gp=gpar(cex=12)),
xlab="Prediction RMSE")
dev.off()
png("nhanes.pred.png",width=5,height=5,units="in",res=300)
forestplot(labeltext=c("SCAD","MC+","1-stage","2-stage","AL"),
mean = cbind(data.p.original[1:5],data.p.s[1:5]),
lower = cbind(data.p.original[6:10],data.p.s[6:10]),
upper = cbind(data.p.original[11:15],data.p.s[11:15]),
boxsize = 0.1,
col=fpColors(lines="blue",box=c("red","black")),
xticks=seq(0,5,1),
txt_gp = fpTxtGp(xlab = gpar(cex=1),
ticks = gpar(cex=1)
),legend=c("Original scale","Standardized scale"),
xlab="Prediction RMSE")
dev.off()
forestplot(labeltext=c("SCAD","MC+","AL","1-stage","2-stage"),
mean = cbind(data.p.original[c(1:2,5,3:4)],data.p.s[c(1:2,5,3:4)]),
lower = cbind(data.p.original[c(6:7,10,8:9)],data.p.s[c(6:7,10,8:9)]),
upper = cbind(data.p.original[c(11:12,15,13:14)],data.p.s[c(11:12,15,13:14)]),
boxsize = 0.1,
col=fpColors(lines="blue",box=c("red","black")),
xticks=seq(0,5,1),
txt_gp = fpTxtGp(xlab = gpar(cex=1),
ticks = gpar(cex=1)
),legend=c("Original scale","Standardized scale"),
xlab="Prediction RMSE")
png("nhanes.pred.png",width=5,height=5,units="in",res=300)
forestplot(labeltext=c("SCAD","MC+","AL","1-stage","2-stage"),
mean = cbind(data.p.original[c(1:2,5,3:4)],data.p.s[c(1:2,5,3:4)]),
lower = cbind(data.p.original[c(6:7,10,8:9)],data.p.s[c(6:7,10,8:9)]),
upper = cbind(data.p.original[c(11:12,15,13:14)],data.p.s[c(11:12,15,13:14)]),
boxsize = 0.1,
col=fpColors(lines="blue",box=c("red","black")),
xticks=seq(0,5,1),
txt_gp = fpTxtGp(xlab = gpar(cex=1),
ticks = gpar(cex=1)
),legend=c("Original scale","Standardized scale"),
xlab="Prediction RMSE")
dev.off()
png("iran.pred.png",width=6,height=6,units="in",res=300)
forestplot(labeltext=c("SCAD","MC+","AL","1-stage","2-stage"),
mean = data.p[c(1:2,5,3:4)],
lower = data.p[c(6:7,10,8:9)],
upper = data.p[c(11:12,15,13:14)],
boxsize = 0.1,
col=fpColors(lines="blue"),
xticks=seq(0,500,100),
txt_gp = fpTxtGp(xlab = gpar(cex=1),
ticks = gpar(cex=1)
),
xlab="Prediction RMSE")
dev.off()
